install.packages("caret")
install.packages("Rchart")
install.packages("RGtk2")
install.packages("plotly")
install.packages("googleVis")
install.packages("gridExtra")
install.packages("lattice")
install.packages("ggplot2")
install.packages("xtable")
install.packages("shiny")
install.packages("devtools")
install.packages("plyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("yaml")
install.packages("gbm")
setwd("/home/sascha/Dokumente/Coursera/Practical Machine Learning/Assignment/barbell_lifts")
barbel_train<- read.csv("./data/pml-training.csv")
barbel_test<- read.csv("./data/pml-testing.csv")
#remove X, user_name, raw_timestamp_part_1 and 2, cvtd_timestamp, new_window and num_window
barbel_test <- barbel_test[,-c(1:7)]
#remove na variables and problem_id from test data
barbel_test <- barbel_test[,colSums(is.na(barbel_test))<20]
barbel_test <- barbel_test[,!(names(barbel_test)=="problem_id")]
#add placeholder variable for predictions to test data set
barbel_test$classe<-as.character("")
#only keep variables that occur in both reduced tables
barbel_train<-barbel_train[,intersect(names(barbel_train), names(barbel_test))]
#Split training data into training and cross-validation dataset
library(caret);
set.seed(32617)
inTrain <- createDataPartition(y=barbel_train$classe,p=0.6, list=FALSE)
training <- barbel_train[inTrain,]
cross_valid <- barbel_train[-inTrain,]
install.packages("caret")
load("/run/user/1000/gvfs/smb-share:server=192.168.1.12,share=coursera/Practical Machine Learning/Assignment/barbell_lifts/Barbel.RData")
save(modelFit2, file= ""./cache/modelFit2.rda"")
save(modelFit2, file= "./cache/modelFit2.rda")
removel(modelFit2)
remove(modelFit2)
if (file.exists("./cache/modelFit2.rda") load("./cache/modelFit2.rda")
if (file.exists("./cache/modelFit2.rda")) load("./cache/modelFit2.rda")
save(modelFit3, file= "./cache/modelFit3.rda")
save(modelFit4, file= "./cache/modelFit4.rda")
save(modelFit1, file= "./cache/modelFit1.rda")
if (file.exists("./cache/modelFit1.rda")) load("./cache/modelFit1.rda")
else {
if (file.exists("./cache/modelFit1.rda")) {load("./cache/modelFit1.rda")}
else {
if (file.exists("./cache/modelFit1.rda")) load("./cache/modelFit1.rda")
else {
modelFit1<-train(training$classe~., method="rpart", data=training)
save(modelFit1, file= "./cache/modelFit1.rda")
}
library(caret);
if (file.exists("./cache/modelFit1.rda")) {
load("./cache/modelFit1.rda")
} else {
modelFit1<-train(training$classe~., method="rpart", data=training)
save(modelFit1, file= "./cache/modelFit1.rda")
}
if (file.exists("./cache/modelFit1.rda")) load("./cache/modelFit1.rda")
else {
modelFit1<-train(training$classe~., method="rpart", data=training)
save(modelFit1, file= "./cache/modelFit1.rda")
}
if (file.exists("./cache/modelFit1.rda")) {load("./cache/modelFit1.rda")}
else {
modelFit1<-train(training$classe~., method="rpart", data=training)
save(modelFit1, file= "./cache/modelFit1.rda")
}
if (file.exists("./cache/modelFit1.rda")) {
load("./cache/modelFit1.rda")}
else {
modelFit1<-train(training$classe~., method="rpart", data=training)
if (file.exists("./cache/modelFit1.rda")) {
load("./cache/modelFit1.rda")
} else {
modelFit1<-train(training$classe~., method="rpart", data=training)
save(modelFit1, file= "./cache/modelFit1.rda")}
if (file.exists("./cache/modelFit2.rda")) {load("./cache/modelFit2.rda")
} else {
modelFit2<-train(classe~., data = training, method="glmnet")
save(modelFit2, file= "./cache/modelFit2.rda")}
predictions
predictions<-predict(modelFit4,barbel_test)
predictions
knit("Final-results.Rmd")
library(knitr)
knit("Final-results.Rmd")
